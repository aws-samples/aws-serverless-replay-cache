AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Replay Cache

Globals: # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
  Function:
    Runtime: nodejs12.x
    Handler: lambda.handler
    Timeout: 3
    AutoPublishAlias: live

Parameters:
  BucketName:
    Description: Bucket name used to host cache content
    Type: String
  MaxContentLength:
    Description: Max allowed file size to be cached in MB
    Type: String
    Default: 5

Resources:
  ### SSM Parameters ###
  BucketSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Bucket name used to host cache content
      Name: /replay-cache/bucket
      Type: String
      Value: !Ref BucketName

  MaxContentLengthSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Max allowed file size to be cached in MB
      Name: /replay-cache/maxContentLength
      Type: String
      Value: !Ref MaxContentLength

  RootAccessFileName:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: File name used to save cache when URI doesn't have a file (e.g. index.html)
      Name: /replay-cache/rootAccessFileName
      Type: String
      Value: _ROOT

  QueryStringSymbol:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Symbol used to replace query string question mark
      Name: /replay-cache/queryStringSymbol
      Type: String
      Value: '#'

  ContentManagerFunctionArn:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Content Manager Function Name
      Name: /replay-cache/contentManagerFunctionArn
      Type: String
      Value: !GetAtt ContentManagerFunction.Arn


  ### IAM ###
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ParameterStorePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'ssm:GetParametersByPath'
            Resource: '*'
      Roles: 
        - !Ref OriginRequestRole
        - !Ref OriginResponseRole
        - !Ref ContentManagerRole

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource: !GetAtt ContentManagerFunction.Arn
      Roles: 
        - !Ref OriginResponseRole

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:PutObject'
            Resource:
              !Join
                - ''
                - - !GetAtt S3Bucket.Arn
                  - '/*'
      Roles: 
        - !Ref ContentManagerRole        
   
  OriginRequestRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: ReplayCacheOriginRequestRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"             
            Principal:
              Service: 
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

  OriginResponseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ReplayCacheOriginResponseRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"             
            Principal:
              Service: 
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
 
  ContentManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ReplayCacheContentManagerRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"

                
  ### Lambda Functions ###  
  OriginRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: origin-request/
      FunctionName: replay-cache-origin-request
      Role: !GetAtt OriginRequestRole.Arn

  OriginResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: origin-response/
      FunctionName: replay-cache-origin-response
      Role: !GetAtt OriginResponseRole.Arn

  ContentManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: content-manager/
      FunctionName: replay-cache-content-manager
      Role: !GetAtt ContentManagerRole.Arn


  ### S3 ###
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref BucketName
