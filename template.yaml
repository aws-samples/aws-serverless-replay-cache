AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Replay Cache

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: lambda.handler
    AutoPublishAlias: live

Parameters:
  BucketName:
    Description: Bucket name used to host cache content
    Type: String
    
  TableName:
    Description: 'DynamoDB Table Name'
    Type: String
    Default: 'replay-cache'    

Resources:
  ### SSM Parameters ###
  BucketSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Bucket name used to host cache content
      Name: /replay-cache/bucket
      Type: String
      Value: !Ref BucketName

Resources:
  ### IAM ###
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'lambda:SendMessage'
            Resource: !GetAtt ContentManagerFunction.Arn
      Roles: 
        - !Ref OriginResponseRole

  DynamoDBPutItemPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBPutItemPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'dynamodb:putItem'
            Resource: 
              !Join
                - ''
                - - 'arn:aws:dynamodb:*:'
                  - !Ref 'AWS::AccountId'
                  - ':table/'
                  - !Ref TableName            
      Roles: 
        - !Ref OriginResponseRole

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:PutObject'
            Resource:
              !Join
                - ''
                - - !GetAtt S3Bucket.Arn
                  - '/*'
      Roles: 
        - !Ref ContentManagerRole        

  OriginRequestRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: ReplayCacheOriginRequestRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'             
            Principal:
              Service: 
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'

  OriginResponseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ReplayCacheOriginResponseRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'             
            Principal:
              Service: 
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
 
  ContentManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ReplayCacheContentManagerRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 
              - 'sts:AssumeRole'
            Principal:
              Service: 
                - 'lambda.amazonaws.com'

                
  ### Lambda Functions ###  
  OriginRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: origin-request/
      FunctionName: replay-cache-origin-request
      Role: !GetAtt OriginRequestRole.Arn

  OriginResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: origin-response/
      FunctionName: replay-cache-origin-response
      Role: !GetAtt OriginResponseRole.Arn

  ContentManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: content-manager/
      FunctionName: replay-cache-content-manager
      Role: !GetAtt ContentManagerRole.Arn
      Timeout: 5
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ReplayCacheDynamoDBTable.StreamArn
            BatchSize: 2
            StartingPosition: TRIM_HORIZON            


  ### S3 ###
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref BucketName
      MetricsConfigurations:
        - Id: "EntireBucket"


  ## DynamoDB ###
  ReplayCacheDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: 'uri'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'uri'
          KeyType: 'HASH'
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: 'PROVISIONED'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: 'ttl'
        Enabled: true        
        

  ReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 'ReplayCacheDynamoDBTable'
    Properties:
      MaxCapacity: 30
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - 'table'
          - !Ref TableName
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
      RoleARN: 
        !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable'

  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 'ReplayCacheDynamoDBTable'
    Properties:
      MaxCapacity: 30
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - 'table'
          - !Ref TableName
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
      RoleARN: 
        !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable'
      
  ReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization  
      
Outputs:
  Bucket:
    Description: 'Content Bucket Name'
    Value: !Ref BucketName